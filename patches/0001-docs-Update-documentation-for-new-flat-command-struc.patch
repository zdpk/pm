From 32599f53defadb7beaeeeb22de1fdd38c89775c2 Mon Sep 17 00:00:00 2001
From: zdpk <zdpk@users.noreply.github.com>
Date: Sun, 13 Jul 2025 19:09:32 +0900
Subject: [PATCH] docs: Update documentation for new flat command structure

---
 README.md        | 118 ++++++++++++++++++------------------
 docs/COMMANDS.md | 151 ++++++++++++++++++++++++++++++++---------------
 2 files changed, 163 insertions(+), 106 deletions(-)

diff --git a/README.md b/README.md
index 033fa07..6702315 100644
--- a/README.md
+++ b/README.md
@@ -61,26 +61,35 @@ cargo install --path .
 # Interactive initialization - sets up PM configuration
 pm init
 
-# Add a project
-pm project add ~/workspace/my-project --tags rust,backend
+# Add current directory as a project (with interactive tag selection)
+pm add .
+
+# Add all subdirectories in current folder as projects
+pm add *
+
+# Add/create a specific project (interactive tags, git init option)
+pm add my-new-project
 
 # Scan for existing repositories
-pm github scan
+pm scan
 
 # Clone GitHub repositories (interactive browse)
-pm github clone
+pm clone
 
-# List all projects
-pm project list
+# Clone specific repository
+pm clone owner/repo
 
-# List projects with filters (aliases work too)
-pm p ls --tags rust --recent 7d --limit 10
+# List all projects (alias: ls)
+pm list
 
-# Switch to a project (opens editor automatically)
-pm project switch my-project
+# List projects with filters
+pm ls --tags rust --recent 7d --limit 10
 
-# Switch without opening editor (aliases work too)
-pm p s my-project --no-editor
+# Switch to a project (opens editor automatically, alias: sw)
+pm switch my-project
+
+# Switch without opening editor
+pm sw my-project --no-editor
 ```
 
 ### Initial Setup Example
@@ -96,26 +105,22 @@ $ pm init
 > Use detected GitHub username 'your-username'? Yes
 > Configuration directory: ~/.config/pm
   Where PM configuration files will be stored (press Enter for default)
-> Projects root directory: ~/workspace  
-  Where your projects will be stored (press Enter for default)
 > Choose your preferred editor: hx (Helix)
 > Automatically open editor when switching to projects? Yes
 > Show git status in project listings? Yes
 
 üìÇ Creating configuration directory: /Users/you/.config/pm
-üìÅ Creating projects root directory: /Users/you/workspace
 
 ‚úÖ PM initialized successfully
-üë§ GitHub username: your-username
 üìÇ Config directory: /Users/you/.config/pm
-üìÅ Projects root: /Users/you/workspace
 ‚öôÔ∏è Config file: /Users/you/.config/pm/config.yml
 
 üéØ Next steps:
-  pm project add <path>          # Add your first project
-  pm github scan                 # Scan for existing repositories
-  pm github clone <owner>/<repo> # Clone specific repository
-  pm github clone                # Browse and select repositories
+  pm add .                       # Add current directory
+  pm add *                       # Add all subdirectories
+  pm scan                        # Scan for existing repositories
+  pm clone <owner>/<repo>        # Clone specific repository
+  pm clone                       # Browse and select repositories
 
 üìñ Use 'pm --help' to see all available commands
 ```
@@ -124,54 +129,58 @@ $ pm init
 
 ## Command Reference
 
+All commands support aliases shown in parentheses. Use `pm --help` for complete usage information.
+
 ### Project Management
 
 ```bash
-# Add projects
-pm project add <path>                           # Add current or specified directory
-pm project add . --name "My Project" --tags web,frontend
-pm p add ~/code/api --description "REST API service"  # Using alias
-
-# List projects
-pm project list                                 # List all projects
-pm p ls --tags rust,backend                    # Filter by tags (AND logic) 
-pm p ls --tags-any frontend,web                # Filter by tags (OR logic)
-pm p ls --recent 7d                             # Show recent activity (7 days)
-pm p ls --detailed                              # Show detailed information
-
-# Switch projects
-pm project switch <name>                        # Switch and open editor
-pm p s <name> --no-editor                      # Switch without editor (alias)
+# Add projects (a)
+pm add .                                        # Add current directory (interactive tags)
+pm add *                                        # Add all subdirectories in current folder
+pm add my-project                               # Create and add new project (with git init option)
+pm add /path/to/project --name "Custom Name"   # Add with custom name
+pm add . --description "My awesome project"    # Add with description
+
+# List projects (ls)
+pm list                                         # List all projects
+pm ls --tags rust,backend                      # Filter by tags (AND logic) 
+pm ls --tags-any frontend,web                  # Filter by tags (OR logic)
+pm ls --recent 7d                               # Show recent activity (7 days)
+pm ls --detailed                                # Show detailed information
+
+# Switch projects (sw)
+pm switch <name>                                # Switch and open editor
+pm sw <name> --no-editor                       # Switch without opening editor
 ```
 
 ### GitHub Integration
 
 ```bash
-# Clone repositories (interactive browse or direct)
-pm github clone                               # Interactive browse your repositories
-pm gh clone microsoft/vscode                  # Clone specific repository
-pm gh clone owner/repo --directory ~/custom   # Clone to custom directory
-
-# Scan for repositories
-pm github scan                                # Scan default workspace
-pm gh scan ~/Development                      # Scan specific directory
-pm gh scan --show-all                        # Show all found repositories
+# Clone repositories (cl)
+pm clone                                        # Interactive browse your repositories
+pm clone microsoft/vscode                      # Clone specific repository
+pm clone owner/repo --directory ~/custom       # Clone to custom directory
+
+# Scan for repositories (sc)
+pm scan                                         # Scan current directory
+pm scan ~/Development                           # Scan specific directory
+pm scan --show-all                             # Show all found repositories
 ```
 
 ### Tag Management
 
 ```bash
-# Manage tags
-pm tag add <project> <tags...>         # Add tags to project
-pm tag remove <project> <tags...>      # Remove tags from project
-pm tag list                            # List all available tags
-pm tag show [project]                  # Show tags for project
+# Manage tags (t)
+pm tag add <project> <tags...>                 # Add tags to project
+pm tag remove <project> <tags...>              # Remove tags from project
+pm tag list                                     # List all available tags
+pm tag show [project]                          # Show tags for project
 ```
 
 ### Configuration
 
 ```bash
-# View and edit configuration
+# View and edit configuration (cf)
 pm config show                         # Show current configuration
 pm config edit                         # Edit in your preferred editor
 pm config validate                     # Validate configuration file
@@ -203,10 +212,8 @@ pm config history --limit 10           # Show configuration history
 
 PM stores its configuration in a configurable location (default: `~/.config/pm/config.yml`). The configuration includes:
 
-- **GitHub username**: For repository cloning and GitHub integration
 - **Configuration path**: Where PM stores its configuration files (configurable during init)
-- **Projects root directory**: Where your projects are located
-- **Editor preference**: Your preferred code editor
+- **Editor preference**: Your preferred code editor  
 - **Application settings**: Auto-open editor, show git status, etc.
 - **Project data**: All managed projects and their metadata
 - **Machine metadata**: Access tracking across different machines
@@ -215,9 +222,7 @@ PM stores its configuration in a configurable location (default: `~/.config/pm/c
 
 ```yaml
 version: "1.0"
-github_username: "your-username"
 config_path: "/Users/you/.config/pm"
-projects_root_dir: "/Users/you/workspace"
 editor: "hx"
 settings:
   auto_open_editor: false
@@ -232,7 +237,6 @@ machine_metadata: {}
 During `pm init`, you can customize:
 
 - **Configuration Directory**: Where PM stores its files (default: `~/.config/pm`)
-- **Projects Root Directory**: Where your projects will be stored (default: `~/workspace`)
 - **Editor**: Your preferred code editor (VS Code, Helix, Vim, etc.)
 - **Auto-open Editor**: Whether to automatically open editor when switching projects
 - **Git Status Display**: Whether to show git status information in project listings
diff --git a/docs/COMMANDS.md b/docs/COMMANDS.md
index 3e792e4..0c9dcaa 100644
--- a/docs/COMMANDS.md
+++ b/docs/COMMANDS.md
@@ -4,11 +4,13 @@ This document provides a detailed reference for all commands available in the `p
 
 ## Global Options
 
-*   `--help`: Print help information
-*   `--version`: Print version information
+*   `-h, --help`: Print help information
+*   `-v, --version`: Print version information
 
 ## Commands
 
+All commands now use a flat structure with aliases. No more nested subcommands like `pm project` or `pm github`.
+
 ### `pm init`
 
 Initializes PM with interactive configuration setup.
@@ -59,14 +61,14 @@ $ pm init
 ‚úÖ PM initialized successfully
 üë§ GitHub username: your-username
 üìÇ Config directory: /Users/you/.config/pm
-üìÅ Projects root: /Users/you/workspace
 ‚öôÔ∏è Config file: /Users/you/.config/pm/config.yml
 
 üéØ Next steps:
-  pm add <path>     # Add your first project
-  pm scan           # Scan for existing repositories
-  pm load <owner>/<repo> # Clone from GitHub
-  pm browse         # Browse and select GitHub repositories
+  pm add .                       # Add current directory
+  pm add *                       # Add all subdirectories
+  pm scan                        # Scan for existing repositories
+  pm clone <owner>/<repo>        # Clone from GitHub
+  pm clone                       # Browse and select GitHub repositories
 ```
 
 **Fallback Example (GitHub CLI not authenticated):**
@@ -88,71 +90,101 @@ $ pm init
 *   Generates a YAML configuration file with user preferences
 *   Provides clear next steps for getting started
 
-### `pm project` (alias: `pm p`)
-
-Manages your projects (add, list, switch).
-
-#### `pm project add <PATH>`
+### `pm add` (alias: `pm a`)
 
-Adds a new project to `pm`'s management list.
+Adds projects to PM's management list with interactive features.
 
 **Usage:**
 
 ```bash
-pm project add ~/path/to/my-project
-pm p add my-relative-project # Resolves relative to projects_root_dir from pm init
+pm add .                                        # Add current directory
+pm add *                                        # Add all subdirectories in current folder  
+pm add my-project                               # Create and add new project
+pm add /path/to/project --name "Custom Name"   # Add with custom name
+pm add . --description "My awesome project"    # Add with description
 ```
 
+**Special Path Patterns:**
+
+*   `.` - Current directory
+*   `*` - All subdirectories in current directory
+*   `<path>` - Specific path (relative to current dir or absolute)
+
 **Options:**
 
 *   `-n, --name <NAME>`: Specify a custom name for the project. If omitted, the directory name will be used.
-*   `-t, --tags <TAGS>...`: Comma-separated list of tags to associate with the project (e.g., `frontend,react,work`).
 *   `-d, --description <DESCRIPTION>`: A brief description of the project.
 
+**Interactive Features:**
+
+*   **Tag Selection**: For single operations, interactive tag selection with existing tags + ability to create new ones
+*   **Directory Creation**: Prompts to create directories that don't exist
+*   **Git Initialization**: Option to initialize new directories as Git repositories
+*   **Duplicate Handling**: Skips already registered projects
+
 **Behavior:**
 
-*   Resolves the provided `<PATH>` to an absolute path. If `<PATH>` is relative, it's resolved against the `projects_root_dir` configured during `pm init`.
-*   Automatically detects if the path is a Git repository and stores the last commit time (`git_updated_at`).
-*   Adds the project metadata to `config.json`.
+*   Resolves paths relative to current working directory
+*   Automatically detects Git repositories and stores last commit time
+*   For single operations: full interactive experience
+*   For batch operations (`*`): streamlined processing with summary
 
-#### `pm project ls`
+### `pm list` (alias: `pm ls`)
 
-Lists all projects currently managed by `pm`.
+Lists all projects currently managed by PM.
 
 **Usage:**
 
 ```bash
-pm project ls
-pm p ls
+pm list                                         # List all projects
+pm ls --tags rust,backend                      # Filter by tags (AND logic) 
+pm ls --tags-any frontend,web                  # Filter by tags (OR logic)
+pm ls --recent 7d                               # Show recent activity (7 days)
+pm ls --detailed                                # Show detailed information
 ```
 
+**Options:**
+
+*   `-t, --tags <TAGS>`: Filter by tags (comma-separated, all tags must match)
+*   `--tags-any <TAGS>`: Filter by tags (comma-separated, any tag can match)  
+*   `-r, --recent <TIME>`: Show only projects updated within time period (e.g., 7d, 2w, 1m, 1y)
+*   `-l, --limit <NUMBER>`: Limit the number of results
+*   `-d, --detailed`: Show detailed information
+
 **Behavior:**
 
-*   Lists projects sorted by `git_updated_at` (if available), then `updated_at`, then `created_at`.
-*   Asynchronously updates `git_updated_at` for projects if it's missing or older than 1 hour.
-*   Displays project name, tags, and last update time (either Git commit time or PM update time).
+*   Lists projects sorted by `git_updated_at` (if available), then `updated_at`, then `created_at`
+*   Asynchronously updates `git_updated_at` for projects if it's missing or older than 1 hour
+*   Displays project name, path, tags, and last update time
+*   Shows both name and path to distinguish projects with same names
 
-#### `pm project s <NAME>`
+### `pm switch` (alias: `pm sw`)
 
 Switches to a specified project's directory and optionally opens an editor.
 
 **Usage:**
 
 ```bash
-pm project s my-project
-pm p s another-project
+pm switch my-project                            # Switch and open editor
+pm sw my-project --no-editor                   # Switch without opening editor
 ```
 
+**Arguments:**
+
+*   `<NAME>`: Project name to switch to
+
 **Options:**
 
-*   `--no-editor`: Prevents `pm` from opening the default editor (Helix).
+*   `--no-editor`: Prevents PM from opening the configured editor
 
 **Behavior:**
 
-*   Changes the current working directory to the project's path.
-*   If `--no-editor` is not specified, it attempts to open the `hx` (Helix) editor in the project directory.
+*   Changes the current working directory to the project's path
+*   Records project access for usage tracking
+*   Opens configured editor (respects `config.editor`, `EDITOR` env var, or defaults to `hx`)
+*   Provides suggestions for similar project names if not found
 
-### `pm tag`
+### `pm tag` (alias: `pm t`)
 
 Manages tags associated with your projects.
 
@@ -218,22 +250,16 @@ pm tag show # If run inside a project directory
 *   If `PROJECT_NAME` is provided, it shows tags for that project.
 *   If `PROJECT_NAME` is omitted, it attempts to find a project associated with the current working directory and displays its tags.
 
-## GitHub Integration
-
-### `pm github` (alias: `pm gh`)
-
-Contains subcommands for GitHub integration. All GitHub-related functionality is grouped under this command.
-
-#### `pm github clone` (alias: `pm gh clone`)
+### `pm clone` (alias: `pm cl`)
 
 Clone repositories from GitHub with interactive browse or direct clone functionality.
 
 **Usage:**
 
 ```bash
-pm github clone                               # Interactive browse your repositories
-pm gh clone microsoft/vscode                  # Clone specific repository
-pm gh clone owner/repo --directory ~/custom   # Clone to custom directory
+pm clone                                        # Interactive browse your repositories
+pm clone microsoft/vscode                      # Clone specific repository  
+pm clone owner/repo --directory ~/custom       # Clone to custom directory
 ```
 
 **Arguments:**
@@ -242,7 +268,7 @@ pm gh clone owner/repo --directory ~/custom   # Clone to custom directory
 
 **Options:**
 
-*   `-d, --directory <DIRECTORY>`: Target directory (defaults to `<projects_root>/<owner>/<repo>`)
+*   `-d, --directory <DIRECTORY>`: Target directory (defaults to `<current_dir>/<owner>/<repo>`)
 
 **Behavior:**
 
@@ -262,21 +288,21 @@ pm gh clone owner/repo --directory ~/custom   # Clone to custom directory
 *   Adds cloned project to PM management
 *   Assigns 'github' tag automatically
 
-#### `pm github scan` (alias: `pm gh scan`)
+### `pm scan` (alias: `pm sc`)
 
 Scan directories for existing Git repositories and add them to PM.
 
 **Usage:**
 
 ```bash
-pm github scan                    # Scan default workspace (~/workspace)
-pm gh scan ~/Development          # Scan specific directory
-pm gh scan --show-all            # Show all found repositories without selection
+pm scan                           # Scan current directory
+pm scan ~/Development             # Scan specific directory
+pm scan --show-all               # Show all found repositories without selection
 ```
 
 **Options:**
 
-*   `-d, --directory <DIRECTORY>`: Directory to scan (defaults to ~/workspace)
+*   `-d, --directory <DIRECTORY>`: Directory to scan (defaults to current directory)
 *   `--show-all`: Show all repositories found, don't prompt for selection
 
 **Behavior:**
@@ -288,3 +314,30 @@ pm gh scan --show-all            # Show all found repositories without selection
 *   Assigns 'scanned' tag to added projects
 *   Preserves Git remote URLs as descriptions
 
+### `pm config` (alias: `pm cf`)
+
+Manage PM configuration with comprehensive options for customization.
+
+**Usage:**
+
+```bash
+pm config show                         # Show current configuration
+pm config edit                         # Edit in your preferred editor
+pm config validate                     # Validate configuration file
+pm config get editor                   # Get specific value
+pm config set editor hx                # Set specific value
+```
+
+**Subcommands:**
+
+*   `show`: Display current configuration
+*   `edit`: Open configuration file in editor
+*   `validate`: Check configuration validity
+*   `get <key>`: Get specific configuration value
+*   `set <key> <value>`: Set configuration value
+*   `list`: List all available configuration keys
+*   `backup`: Backup and restore operations
+*   `template`: Template operations
+*   `export`: Export configuration
+*   `import`: Import configuration
+
-- 
2.47.0

