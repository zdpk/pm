From a6684139c1d02b0f5965c1b0b3b7c7e1c27899ee Mon Sep 17 00:00:00 2001
From: zdpk <zdpk@users.noreply.github.com>
Date: Sun, 13 Jul 2025 19:10:35 +0900
Subject: [PATCH] feat: Enhance add command with patterns and interactive tag
 selection

Major improvements to the pm add command:

Pattern Support:
- 'pm add .' - Add current directory as project
- 'pm add *' - Add all subdirectories in current folder
- 'pm add <path>' - Add specific path (create if needed)

Interactive Features:
- Smart tag selection with existing tags displayed by usage count
- Ability to create new tags during project addition
- Git repository initialization option for new directories
- Real-time tag selection feedback with current status

Batch Processing:
- Intelligent handling of single vs multiple directory operations
- Progress indicators for batch operations
- Comprehensive summary (X added, Y skipped)
- Skip duplicate projects without errors

Directory Management:
- Create missing directories with user confirmation
- Optional git init for newly created directories
- Path resolution relative to current working directory
- Proper validation and error handling

This transforms pm add from a simple directory registration tool
into a comprehensive project onboarding system with smart defaults
and interactive guidance.
---
 src/commands/project.rs | 348 ++++++++++++++++++++++++++++++----------
 1 file changed, 263 insertions(+), 85 deletions(-)

diff --git a/src/commands/project.rs b/src/commands/project.rs
index 97d65f7..f1c6f73 100644
--- a/src/commands/project.rs
+++ b/src/commands/project.rs
@@ -10,7 +10,7 @@ use chrono::Utc;
 use colored::*;
 use git2::Repository;
 use indicatif::{ProgressBar, ProgressStyle};
-use inquire::{Confirm, MultiSelect};
+use inquire::{Confirm, MultiSelect, Select, Text};
 use octocrab::{Octocrab, params::users::repos::Type as RepoType, params::repos::Sort};
 use std::collections::HashSet;
 use std::fs;
@@ -36,67 +36,161 @@ pub struct GitHubRepo {
 pub async fn handle_add(
     path: &PathBuf,
     name: &Option<String>,
-    tags: &[String],
+    _tags: &[String], // Will be replaced with interactive selection
     description: &Option<String>,
 ) -> Result<()> {
     let mut config = load_config().await?;
-
-    let resolved_path = if path.is_absolute() {
-        path.clone()
-    } else {
-        config.projects_root_dir.join(path)
+    
+    // Parse path patterns
+    let path_str = path.to_string_lossy().to_string();
+    let target_paths = match path_str.as_str() {
+        "." => vec![std::env::current_dir()?],
+        "*" => {
+            // Get all subdirectories in current directory
+            let current_dir = std::env::current_dir()?;
+            let mut subdirs = Vec::new();
+            
+            if let Ok(entries) = fs::read_dir(&current_dir) {
+                for entry in entries.flatten() {
+                    if entry.file_type().map(|ft| ft.is_dir()).unwrap_or(false) {
+                        subdirs.push(entry.path());
+                    }
+                }
+            }
+            subdirs
+        }
+        _ => {
+            // Single path handling
+            let resolved_path = if path.is_absolute() {
+                path.clone()
+            } else {
+                std::env::current_dir()?.join(path)
+            };
+            vec![resolved_path]
+        }
     };
 
-    // Check if directory exists
-    let absolute_path = if !resolved_path.exists() {
-        // Directory doesn't exist - prompt user to create it
-        match handle_inquire_error(Confirm::new(&format!(
-            "Directory '{}' doesn't exist. Create it?",
-            resolved_path.display()
-        ))
-        .with_default(true)
-        .prompt()) {
-            Ok(create_dir) => {
-                if !create_dir {
-                    println!("‚ùå Directory creation cancelled. Project not added.");
+    let mut added_count = 0;
+    let mut skipped_count = 0;
+    let target_count = target_paths.len();
+
+    for (index, target_path) in target_paths.iter().enumerate() {
+        let result = process_single_add(&mut config, target_path, name, description, index + 1, target_count).await;
+        
+        match result {
+            Ok(AddResult::Added(project_name)) => {
+                added_count += 1;
+                if target_count == 1 {
+                    println!("‚úÖ Successfully added project '{}'", project_name);
+                    println!("   Path: {}", target_path.display());
+                }
+            }
+            Ok(AddResult::Skipped) => {
+                skipped_count += 1;
+                if target_count == 1 {
+                    println!("‚ÑπÔ∏è  Project already exists at this path");
                     return Ok(());
                 }
             }
+            Ok(AddResult::Created(project_name)) => {
+                added_count += 1;
+                if target_count == 1 {
+                    println!("‚úÖ Created and added project '{}'", project_name);
+                    println!("   Path: {}", target_path.display());
+                }
+            }
             Err(_) => {
-                return Ok(()); // User cancelled with Ctrl-C or other error
+                if target_count == 1 {
+                    return result.map(|_| ());
+                }
+                skipped_count += 1;
             }
         }
+    }
+
+    // Summary for multiple operations
+    if target_count > 1 {
+        println!("‚úÖ Processing {} directories...", target_count);
+        if added_count > 0 {
+            println!("   ‚úÖ Added: {} projects", added_count);
+        }
+        if skipped_count > 0 {
+            println!("   ‚è≠Ô∏è  Skipped: {} already registered", skipped_count);
+        }
+        println!("\nüìä Summary: {} added, {} skipped", added_count, skipped_count);
+    }
+
+    save_config(&config).await?;
+    Ok(())
+}
+
+#[derive(Debug)]
+enum AddResult {
+    Added(String),
+    Skipped,
+    Created(String),
+}
+
+async fn process_single_add(
+    config: &mut Config,
+    target_path: &Path,
+    name: &Option<String>,
+    description: &Option<String>,
+    current_index: usize,
+    total_count: usize,
+) -> Result<AddResult> {
+    // For multiple directories, show progress
+    if total_count > 1 {
+        println!("\n[{}/{}] Processing: {}", current_index, total_count, target_path.display());
+    }
+
+    let absolute_path = if !target_path.exists() {
+        // Directory doesn't exist - ask to create
+        let should_create = if total_count == 1 {
+            handle_inquire_error(Confirm::new(&format!(
+                "Directory '{}' doesn't exist. Create it?",
+                target_path.display()
+            ))
+            .with_default(true)
+            .prompt())?
+        } else {
+            // For batch operations, create directories by default
+            true
+        };
+
+        if !should_create {
+            return Err(anyhow::anyhow!("Directory creation cancelled"));
+        }
 
         // Create the directory
-        fs::create_dir_all(&resolved_path)?;
-        println!("‚úÖ Created directory: {}", resolved_path.display());
+        fs::create_dir_all(target_path)?;
+        if total_count == 1 {
+            println!("‚úÖ Created directory: {}", target_path.display());
+        }
+        
+        // Ask about git initialization for single operations
+        if total_count == 1 {
+            let init_git = handle_inquire_error(Confirm::new(&format!(
+                "Initialize '{}' as a Git repository?",
+                target_path.display()
+            ))
+            .with_default(true)
+            .prompt())?;
+
+            if init_git {
+                Repository::init(target_path)?;
+                println!("‚úÖ Initialized Git repository in {}", target_path.display());
+            }
+        }
 
-        // Now validate the created path
-        validate_path(&resolved_path)?
+        validate_path(target_path)?
     } else {
-        // Directory exists - validate it
-        validate_path(&resolved_path)?
+        validate_path(target_path)?
     };
 
     // Check for duplicate projects (path-based)
     if config.projects.values().any(|p| p.path == absolute_path) {
-        println!(
-            "‚ÑπÔ∏è  Project already exists at this path: {}",
-            absolute_path.display()
-        );
-        if let Some(existing_project) = config.projects.values().find(|p| p.path == absolute_path) {
-            println!("   Project name: '{}'", existing_project.name);
-            println!(
-                "   Tags: {}",
-                if existing_project.tags.is_empty() {
-                    "none".to_string()
-                } else {
-                    existing_project.tags.join(", ")
-                }
-            );
-        }
-        println!("üí° Use 'pm project list' to see all projects");
-        return Ok(());
+        return Ok(AddResult::Skipped);
     }
 
     let project_name = name.clone().unwrap_or_else(|| {
@@ -107,38 +201,23 @@ pub async fn handle_add(
             .to_string()
     });
 
-    // Check for duplicate project names
-    if config.projects.values().any(|p| p.name == project_name) {
-        display_error(
-            ERROR_DUPLICATE_PROJECT,
-            &format!("with name '{}'", project_name),
-        );
-        display_info(&format!(
-            "Use a different name with: pm add {} --name <new-name>",
-            path.display()
-        ));
-        return Err(PmError::DuplicateProject.into());
-    }
-
-    println!(
-        "üìÇ Adding project '{}' at: {}",
-        project_name,
-        absolute_path.display()
-    );
+    // Interactive tag selection (only for single operations)
+    let selected_tags = if total_count == 1 {
+        select_tags_interactive(config).await?
+    } else {
+        Vec::new() // For batch operations, no tags by default
+    };
 
     let git_updated_at = match get_last_git_commit_time(&absolute_path) {
         Ok(time) => time,
-        Err(_) => {
-            println!("‚ÑπÔ∏è  Not a Git repository (no .git directory found)");
-            None
-        }
+        Err(_) => None,
     };
 
     let project = Project {
         id: Uuid::new_v4(),
         name: project_name.clone(),
         path: absolute_path.clone(),
-        tags: tags.to_vec(),
+        tags: selected_tags,
         description: description.clone(),
         created_at: Utc::now(),
         updated_at: Utc::now(),
@@ -146,19 +225,106 @@ pub async fn handle_add(
     };
 
     config.add_project(project);
-    save_config(&config).await?;
 
-    // Success message
-    println!("‚úÖ Successfully added project '{}'", project_name);
-    if !tags.is_empty() {
-        println!("   Tags: {}", tags.join(", "));
+    if target_path.exists() {
+        Ok(AddResult::Added(project_name))
+    } else {
+        Ok(AddResult::Created(project_name))
     }
-    if let Some(desc) = description {
-        println!("   Description: {}", desc);
+}
+
+async fn select_tags_interactive(config: &Config) -> Result<Vec<String>> {
+    // Collect all existing tags with usage counts
+    let mut tag_counts: std::collections::HashMap<String, usize> = std::collections::HashMap::new();
+    for project in config.projects.values() {
+        for tag in &project.tags {
+            *tag_counts.entry(tag.clone()).or_insert(0) += 1;
+        }
     }
-    println!("   Path: {}", absolute_path.display());
 
-    Ok(())
+    // Sort tags by usage count (descending)
+    let mut sorted_tags: Vec<(String, usize)> = tag_counts.into_iter().collect();
+    sorted_tags.sort_by(|a, b| b.1.cmp(&a.1));
+
+    if sorted_tags.is_empty() {
+        // No existing tags - ask if user wants to add any
+        let add_tags = handle_inquire_error(Confirm::new("Add tags to this project?")
+            .with_default(false)
+            .prompt())?;
+        
+        if !add_tags {
+            return Ok(Vec::new());
+        }
+
+        // Allow user to add new tags
+        return add_new_tags(Vec::new()).await;
+    }
+
+    // Create options list
+    let mut options = Vec::new();
+    for (tag, count) in &sorted_tags {
+        options.push(format!("{} ({} projects)", tag, count));
+    }
+    options.push("+ Add new tag".to_string());
+    options.push("‚úÖ Finish selection".to_string());
+
+    let mut selected_tags = Vec::new();
+
+    loop {
+        // Show current selection
+        if !selected_tags.is_empty() {
+            println!("\nüè∑Ô∏è  Current tags: {}", selected_tags.join(", "));
+        }
+
+        println!("\nüìã Available tags:");
+        let selection = handle_inquire_error(
+            Select::new("Select tag (or finish):", options.clone())
+                .prompt()
+        )?;
+
+        if selection == "‚úÖ Finish selection" {
+            break;
+        } else if selection == "+ Add new tag" {
+            selected_tags = add_new_tags(selected_tags).await?;
+        } else {
+            // Extract tag name from "tag (count projects)" format
+            let tag_name = selection.split(" (").next().unwrap_or(&selection).to_string();
+            
+            if !selected_tags.contains(&tag_name) {
+                selected_tags.push(tag_name.clone());
+                println!("‚úÖ Added tag '{}'", tag_name);
+            } else {
+                println!("‚ÑπÔ∏è  Tag '{}' already selected", tag_name);
+            }
+        }
+    }
+
+    Ok(selected_tags)
+}
+
+async fn add_new_tags(mut current_tags: Vec<String>) -> Result<Vec<String>> {
+    loop {
+        let new_tag = handle_inquire_error(
+            Text::new("Enter new tag (or press Enter to finish):")
+                .with_help_message("Use descriptive tags like 'rust', 'frontend', 'work'")
+                .prompt()
+        )?;
+
+        if new_tag.trim().is_empty() {
+            break;
+        }
+
+        let tag = new_tag.trim().to_lowercase();
+        
+        if !current_tags.contains(&tag) {
+            current_tags.push(tag.clone());
+            println!("‚úÖ Added tag '{}'", tag);
+        } else {
+            println!("‚ÑπÔ∏è  Tag '{}' already added", tag);
+        }
+    }
+
+    Ok(current_tags)
 }
 
 pub async fn handle_list(
@@ -257,15 +423,27 @@ pub async fn handle_switch(config: &mut Config, name: &str, no_editor: bool) ->
         display_switch_success(&project_path, no_editor);
 
         if !no_editor {
-            let mut cmd = std::process::Command::new(DEFAULT_EDITOR);
-            match cmd.status() {
-                Ok(status) => {
-                    if !status.success() {
-                        display_warning(&format!("Editor exited with status: {}", status));
-                    }
+            let editor = if config.editor.is_empty() {
+                std::env::var("EDITOR").unwrap_or_else(|_| DEFAULT_EDITOR.to_string())
+            } else {
+                config.editor.clone()
+            };
+
+            println!("üöÄ Opening {} in {}", project_name, editor);
+            let mut cmd = std::process::Command::new(&editor);
+            cmd.arg(".");
+
+            // Spawn the editor process without waiting
+            match cmd.spawn() {
+                Ok(_) => {
+                    // Editor launched successfully
                 }
                 Err(e) => {
-                    display_editor_error(&e.to_string());
+                    display_error(
+                        "Failed to open editor",
+                        &format!("{}: {}", editor, e),
+                    );
+                    display_suggestions(&vec!["pm config set editor hx".to_string(), "pm config set editor code".to_string(), "pm config set editor vim".to_string()]);
                 }
             }
         }
@@ -947,14 +1125,14 @@ async fn load_repository_internal(repo: &str, directory: Option<&Path>, show_pro
         (current_user, repo.to_string())
     };
 
-    let config = load_config().await?;
+    let _config = load_config().await?;
 
     // Determine target directory
     let target_dir = if let Some(dir) = directory {
         dir.to_path_buf()
     } else {
-        // Default: <root_dir>/<owner>/<repo>
-        config.projects_root_dir.join(&owner).join(&repo_name)
+        // Default: <current_dir>/<owner>/<repo>
+        std::env::current_dir()?.join(&owner).join(&repo_name)
     };
 
     if target_dir.exists() {
-- 
2.47.0

