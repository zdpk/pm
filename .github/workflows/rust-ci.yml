name: Rust CI

on:
  workflow_dispatch:  # Manual execution
  push:
    branches: [ main, develop, feat/* ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: aarch64-apple-darwin
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        targets: ${{ matrix.target }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Check formatting
      run: cargo fmt --all -- --check
      
    - name: Run clippy
      run: cargo clippy --all-targets --all-features --target ${{ matrix.target }} -- -D warnings
      
    - name: Run unit tests
      run: cargo test --verbose --target ${{ matrix.target }} --lib --bins
        
    - name: Run integration tests
      run: cargo test --verbose --target ${{ matrix.target }} --test '*'
        
    - name: Build release
      run: cargo build --release --verbose --target ${{ matrix.target }}

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - name: Install cargo-audit
      run: cargo install cargo-audit
    - name: Run security audit
      run: cargo audit

  docker-e2e-test:
    name: Docker E2E Tests  
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Build release binary
      run: cargo build --release
    - name: Run E2E tests in Docker
      run: |
        docker build -f Dockerfile.manual -t pm-manual .
        docker run --rm -v pm-e2e-config:/home/pmuser/.config/pm pm-manual run-e2e-tests.sh
    - name: Cleanup Docker resources
      run: |
        docker rmi pm-manual 2>/dev/null || true
        docker volume rm pm-e2e-config 2>/dev/null || true
      if: always()

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    - name: Cache cargo-tarpaulin
      uses: actions/cache@v3
      with:
        path: ~/.cargo/bin/cargo-tarpaulin
        key: ${{ runner.os }}-cargo-tarpaulin
    - name: Install cargo-tarpaulin
      run: |
        if ! command -v cargo-tarpaulin &> /dev/null; then
          cargo install cargo-tarpaulin
        fi
    - name: Generate code coverage  
      run: |
        cargo tarpaulin \
          --verbose \
          --all-features \
          --workspace \
          --timeout 180 \
          --exclude-files vendor/* \
          --exclude-files target/* \
          --exclude-files benches/* \
          --exclude-files examples/* \
          --out xml \
          --output-dir coverage/
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: coverage/cobertura.xml
        flags: unittests
        name: codecov-pm
        fail_ci_if_error: false
        verbose: true
    - name: Coverage Summary
      run: |
        if [ -f coverage/cobertura.xml ]; then
          echo "‚úÖ Coverage report generated successfully"
          echo "üìä Coverage details available at: https://codecov.io/gh/${{ github.repository }}"
        else
          echo "‚ùå Coverage report generation failed"
        fi