name: Claude Code Rust

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          allowed_tools: "Bash(cargo build),Bash(cargo test),Bash(cargo fmt),Bash(cargo clippy),Bash(cargo doc),LS,Read,Edit,Write,Glob,Grep,MultiEdit"
          custom_instructions: |
            You have tools for Rust project management:
            - cargo build: Compile the project
            - cargo test: Run tests
            - cargo fmt: Format code
            - cargo clippy: Run linting
            - cargo doc: Generate documentation
            
            This is a Rust CLI project for project management. Follow Rust best practices and conventions.
            Use proper error handling with anyhow and thiserror.
            Follow the existing code patterns and module structure.
          max_turns: "10"
